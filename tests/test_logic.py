'''
Created on 28 Jul 2018

@author: Paulo
'''
import pytest

from minesweeper.minesweeper_logic import MinesweeperLogic


def test_IntToCoordinates():
    logic = MinesweeperLogic(16,30,99)
    
    assert logic.IntToCoordinates(30)==(1,0)
    with pytest.raises(ValueError):
        logic.IntToCoordinates(-30)

def test_CoordinatesToInt():
    logic = MinesweeperLogic(16,30,99)
    
    assert logic.CoordinatesToInt(1,0)==30

def test_GenerateGameMatrix():
    logic = MinesweeperLogic(16,30,99)
    
    logic.minesLocations = [(13, 25), (11, 21), (3, 2), (10, 29), (10, 7), (3, 5), (14, 13), (12, 13), 
                            (4, 25), (9, 19), (10, 23), (13, 22), (15, 21), (12, 24), (4, 3), (13, 23), 
                            (10, 24), (14, 18), (0, 27), (11, 13), (13, 16), (4, 11), (6, 4), (4, 6), 
                            (2, 5), (13, 14), (8, 21), (12, 28), (4, 2), (4, 20), (14, 10), (4, 21), (11, 1), 
                            (8, 24), (4, 27), (9, 8), (7, 24), (6, 2), (7, 17), (3, 7), (12, 14), (13, 21), 
                            (1, 7), (2, 2), (9, 18), (13, 18), (4, 14), (3, 11), (11, 11), (10, 14), (0, 20), 
                            (12, 26), (3, 1), (4, 19), (8, 28), (8, 11), (2, 4), (8, 7), (2, 12), (7, 14), 
                            (3, 14), (14, 9), (15, 24), (7, 4), (6, 6), (3, 17), (13, 27), (4, 24), (7, 8), 
                            (8, 5), (7, 1), (8, 13), (13, 11), (13, 9), (8, 2), (1, 17), (14, 25), (8, 1), 
                            (3, 4), (7, 10), (2, 27), (6, 17), (3, 10), (12, 29), (4, 5), (13, 8), (14, 27), 
                            (7, 7), (4, 9), (5, 8), (5, 0), (7, 23), (3, 16), (8, 4), (12, 12), (10, 27), 
                            (8, 8), (5, 22), (2, 11)]
    
    assert logic.PrintGameMatrix(logic.GenerateGameMatrix(logic.minesLocations)) == [   [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, -1, 1, 0, 0, 0, 0, 1, -1, 1, 0],
    [0, 1, 1, 2, 2, 2, 2, -1, 1, 0, 1, 2, 2, 1, 0, 0, 1, -1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0],
    [1, 3, -1, 4, -1, -1, 4, 2, 2, 1, 3, -1, -1, 2, 1, 2, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0],
    [1, -1, -1, 6, -1, -1, 5, -1, 2, 2, -1, -1, 4, 3, -1, 3, -1, -1, 2, 2, 3, 2, 1, 1, 2, 2, 3, 2, 2, 0],
    [2, 4, -1, -1, 4, -1, -1, 3, 3, -1, 4, -1, 2, 2, -1, 3, 2, 2, 2, -1, -1, -1, 2, 2, -1, -1, 2, -1, 1, 0],
    [-1, 3, 3, 4, 3, 4, 3, 3, -1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, -1, 2, 2, 2, 2, 1, 1, 0],
    [2, 3, -1, 3, -1, 3, -1, 4, 3, 3, 1, 1, 0, 1, 1, 1, 2, -1, 2, 0, 0, 1, 2, 3, 2, 1, 0, 0, 0, 0],
    [2, -1, 4, 5, -1, 5, 4, -1, -1, 3, -1, 2, 2, 2, -1, 1, 2, -1, 2, 0, 1, 1, 2, -1, -1, 2, 0, 1, 1, 1],
    [2, -1, -1, 3, -1, -1, 3, -1, -1, 4, 2, -1, 2, -1, 2, 1, 1, 2, 3, 2, 2, -1, 2, 3, -1, 2, 0, 1, -1, 1],
    [1, 2, 2, 2, 2, 2, 3, 4, -1, 2, 1, 1, 2, 2, 2, 1, 0, 1, -1, -1, 2, 1, 2, 3, 3, 2, 1, 2, 3, 2],
    [1, 1, 1, 0, 0, 0, 1, -1, 2, 1, 1, 1, 2, 2, -1, 1, 0, 1, 2, 2, 2, 1, 2, -1, -1, 1, 1, -1, 2, -1],
    [1, -1, 1, 0, 0, 0, 1, 1, 1, 0, 1, -1, 4, -1, 4, 2, 0, 0, 0, 0, 1, -1, 2, 3, 3, 3, 2, 3, 4, 3],
    [1, 1, 1, 0, 0, 0, 0, 1, 2, 2, 3, 3, -1, -1, -1, 3, 1, 2, 1, 1, 2, 3, 4, 3, -1, 3, -1, 3, -1, -1],
    [0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 4, -1, 4, 5, -1, 3, -1, 3, -1, 2, 1, -1, -1, -1, 4, -1, 5, -1, 4, 2],
    [0, 0, 0, 0, 0, 0, 0, 1, 3, -1, -1, 2, 2, -1, 2, 2, 1, 3, -1, 2, 2, 3, 4, 3, 4, -1, 4, -1, 2, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, -1, 1, 1, -1, 2, 2, 1, 1, 0]]
    
def test_PropagateZeros():
    logic = MinesweeperLogic(16,30,99)
    
    logic.minesLocations = [(13, 25), (11, 21), (3, 2), (10, 29), (10, 7), (3, 5), (14, 13), (12, 13), 
                            (4, 25), (9, 19), (10, 23), (13, 22), (15, 21), (12, 24), (4, 3), (13, 23), 
                            (10, 24), (14, 18), (0, 27), (11, 13), (13, 16), (4, 11), (6, 4), (4, 6), 
                            (2, 5), (13, 14), (8, 21), (12, 28), (4, 2), (4, 20), (14, 10), (4, 21), (11, 1), 
                            (8, 24), (4, 27), (9, 8), (7, 24), (6, 2), (7, 17), (3, 7), (12, 14), (13, 21), 
                            (1, 7), (2, 2), (9, 18), (13, 18), (4, 14), (3, 11), (11, 11), (10, 14), (0, 20), 
                            (12, 26), (3, 1), (4, 19), (8, 28), (8, 11), (2, 4), (8, 7), (2, 12), (7, 14), 
                            (3, 14), (14, 9), (15, 24), (7, 4), (6, 6), (3, 17), (13, 27), (4, 24), (7, 8), 
                            (8, 5), (7, 1), (8, 13), (13, 11), (13, 9), (8, 2), (1, 17), (14, 25), (8, 1), 
                            (3, 4), (7, 10), (2, 27), (6, 17), (3, 10), (12, 29), (4, 5), (13, 8), (14, 27), 
                            (7, 7), (4, 9), (5, 8), (5, 0), (7, 23), (3, 16), (8, 4), (12, 12), (10, 27), 
                            (8, 8), (5, 22), (2, 11)]
    
    logic.gameMatrix = logic.GenerateGameMatrix(logic.minesLocations)
    
    assert logic.PropagateZeros(15, 0) == [(14, 0), (13, 0), (12, 0), (12, 1), (13, 1), (12, 2), (13, 2), 
                                           (12, 3), (11, 2), (11, 3), (10, 2), (10, 3), (9, 2), (9, 3), 
                                           (9, 4), (10, 4), (9, 5), (10, 5), (9, 6), (10, 6), (11, 4), (11, 5), 
                                           (11, 6), (12, 4), (12, 5), (12, 6), (11, 7), (12, 7), (13, 5), 
                                           (13, 4), (13, 3), (14, 2), (14, 1), (15, 0), (15, 1), (15, 2), (14, 3), 
                                           (14, 4), (14, 5), (13, 6), (13, 7), (14, 6), (14, 7), (15, 5), (15, 4), 
                                           (15, 3), (15, 6), (15, 7), (14, 8), (15, 8)]   


